// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
import { randomUUID } from "crypto";
import fs from "fs";
import path from "path";
import matter from "gray-matter";
var MemStorage = class {
  posts;
  constructor() {
    this.posts = /* @__PURE__ */ new Map();
    this.loadPostsFromMarkdown();
  }
  async loadPostsFromMarkdown() {
    try {
      const postsDir = path.join(process.cwd(), "posts");
      if (!fs.existsSync(postsDir)) {
        console.log("Posts directory not found, creating sample posts in memory");
        this.createSamplePosts();
        return;
      }
      const files = fs.readdirSync(postsDir).filter((file) => file.endsWith(".md"));
      for (const file of files) {
        const filePath = path.join(postsDir, file);
        const fileContent = fs.readFileSync(filePath, "utf-8");
        const { data, content } = matter(fileContent);
        const slug = file.replace(".md", "");
        const post = {
          id: randomUUID(),
          slug,
          title: data.title || "Untitled",
          description: data.description || "",
          published: data.published || (/* @__PURE__ */ new Date()).toISOString(),
          video: data.video || "",
          thumbnail: data.thumbnail || "https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=450",
          category: data.category || "General",
          tags: data.tags || [],
          content,
          views: data.views || Math.floor(Math.random() * 5e3),
          likes: data.likes || Math.floor(Math.random() * 500)
        };
        this.posts.set(slug, post);
      }
    } catch (error) {
      console.error("Error loading posts from markdown:", error);
      this.createSamplePosts();
    }
  }
  createSamplePosts() {
    const samplePosts = [
      {
        id: randomUUID(),
        slug: "home-office-setup",
        title: "Building the Perfect Home Office Setup",
        description: "Complete guide to creating a productive workspace that enhances creativity and focus. Learn about essential equipment, lighting, and organization tips.",
        published: "2024-12-15T10:00:00Z",
        video: "https://www.youtube.com/embed/dQw4w9WgXcQ",
        thumbnail: "https://images.unsplash.com/photo-1587831990711-23ca6441447b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=450",
        category: "Technology",
        tags: ["workspace", "productivity", "homeoffice", "technology"],
        content: "# Building the Perfect Home Office Setup\n\nCreating an effective home office is essential for productivity and well-being...",
        views: 1200,
        likes: 89
      }
    ];
    samplePosts.forEach((post) => {
      this.posts.set(post.slug, post);
    });
  }
  async getAllPosts() {
    return Array.from(this.posts.values()).sort(
      (a, b) => new Date(b.published).getTime() - new Date(a.published).getTime()
    );
  }
  async getPostBySlug(slug) {
    return this.posts.get(slug);
  }
  async getPostsByCategory(category) {
    return Array.from(this.posts.values()).filter((post) => post.category.toLowerCase() === category.toLowerCase()).sort((a, b) => new Date(b.published).getTime() - new Date(a.published).getTime());
  }
  async getPostsByTag(tag) {
    return Array.from(this.posts.values()).filter((post) => post.tags.some((t) => t.toLowerCase() === tag.toLowerCase())).sort((a, b) => new Date(b.published).getTime() - new Date(a.published).getTime());
  }
  async incrementViews(slug) {
    const post = this.posts.get(slug);
    if (post) {
      post.views += 1;
      this.posts.set(slug, post);
    }
  }
  async incrementLikes(slug) {
    const post = this.posts.get(slug);
    if (post) {
      post.likes += 1;
      this.posts.set(slug, post);
    }
  }
};
var storage = new MemStorage();

// server/routes.ts
async function registerRoutes(app2) {
  app2.get("/api/posts", async (req, res) => {
    try {
      const posts = await storage.getAllPosts();
      res.json(posts);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch posts" });
    }
  });
  app2.get("/api/posts/:slug", async (req, res) => {
    try {
      const { slug } = req.params;
      const post = await storage.getPostBySlug(slug);
      if (!post) {
        return res.status(404).json({ message: "Post not found" });
      }
      await storage.incrementViews(slug);
      res.json(post);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch post" });
    }
  });
  app2.get("/api/posts/category/:category", async (req, res) => {
    try {
      const { category } = req.params;
      const posts = await storage.getPostsByCategory(category);
      res.json(posts);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch posts by category" });
    }
  });
  app2.get("/api/posts/tag/:tag", async (req, res) => {
    try {
      const { tag } = req.params;
      const posts = await storage.getPostsByTag(tag);
      res.json(posts);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch posts by tag" });
    }
  });
  app2.post("/api/posts/:slug/like", async (req, res) => {
    try {
      const { slug } = req.params;
      const post = await storage.getPostBySlug(slug);
      if (!post) {
        return res.status(404).json({ message: "Post not found" });
      }
      await storage.incrementLikes(slug);
      res.json({ message: "Post liked successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to like post" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs2 from "fs";
import path3 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path2 from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path2.resolve(import.meta.dirname, "client", "src"),
      "@shared": path2.resolve(import.meta.dirname, "shared"),
      "@assets": path2.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path2.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path2.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path3.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs2.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path3.resolve(import.meta.dirname, "public");
  if (!fs2.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path3.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path4 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path4.startsWith("/api")) {
      let logLine = `${req.method} ${path4} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();